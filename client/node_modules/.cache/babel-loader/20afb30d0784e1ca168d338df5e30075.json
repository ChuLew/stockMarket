{"ast":null,"code":"var _jsxFileName = \"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      symbol: \"\",\n      quantity: \"\",\n      buyDateString: \"2020-09-17\",\n      price: 0,\n      todayPrice: 0,\n      open: 0\n    };\n\n    this.change = e => {\n      //recieves on change as props\n      this.props.onChange({\n        [e.target.name]: e.target.value\n      });\n      this.setState({\n        [e.target.name]: e.target.value\n      }); //console.log(e.target.name);\n    };\n\n    this.onSubmit = e => {\n      const API_KEY = \"WUOT41WJEJHDWT6T\";\n      let StockSymbol = this.state.symbol.toUpperCase();\n      let date = this.state.buyDateString;\n      let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n      console.log(this.state.quantity);\n      let qty = this.state.quantity;\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        if (\"Note\" in data) {\n          alert(data.Note);\n        } else if (\"Error Message\" in data) {\n          alert(\"No Ticker exists for your input String Please input valid Ticker Symbol\");\n        } else {\n          console.log(date);\n          console.log(\"error here\");\n          var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n          var todayOpenPrice = data[\"Time Series (Daily)\"][date][\"1. open\"];\n          var today = new Date();\n          var dd = String(today.getDate() - 1).padStart(2, \"0\");\n          var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n\n          var yyyy = today.getFullYear();\n          today = yyyy + \"-\" + mm + \"-\" + dd;\n          var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n          this.setState({\n            price: priceResponse,\n            todayPrice: todayPricez,\n            symbol: StockSymbol,\n            quantity: qty\n          });\n          var object = this.createData(this.state.symbol, this.state.buyDateString, this.state.price, this.state.quantity, this.state.todayPrice); //console.log(object);\n          //very important to remember this will be what i pass into reducer\n\n          this.props.saveTransaction(object);\n          this.setState({\n            symbol: \"\",\n            quantity: \"\",\n            buyDateString: \"2020-09-17\",\n            price: 0,\n            todayPrice: 0\n          });\n          this.props.onChange({\n            symbol: \"\",\n            quantity: \"\",\n            buyDateString: \"2020-09-17\",\n            price: 0,\n            todayPrice: 0\n          });\n        }\n      }.bind(this));\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0\n      }); //******************** */\n      //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n      //conect to redux store\n      //create action creator\n      //make sure i can get an object into database\n      //create fetch stocks  so i can list it in table\n      //make sure i can delete stocks if necesary\n      // add news api\n    };\n\n    this.handleChange = date => {\n      var tempMonth = \"\";\n\n      if (date.getMonth() + 1 < 10) {\n        tempMonth = \"0\" + (date.getMonth() + 1).toString();\n      } else {\n        tempMonth = (date.getMonth() + 1).toString();\n      }\n\n      var tempDay = \"\";\n\n      if (date.getDate() < 10) {\n        tempDay = \"0\" + date.getDate().toString();\n      } else {\n        tempDay = date.getDate().toString();\n      }\n\n      var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`; //console.log(tempMonth);\n\n      this.setState({\n        buyDate: date,\n        buyDateString: stringDate\n      });\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice, todayOpenPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice,\n      open: todayOpenPrice\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, \"What day did you buy stock?\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: this.state.buyDate,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"symbol\",\n      placeholder: \"Ticker Symbol\",\n      value: this.state.symbol,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"quantity\",\n      type: \"number\",\n      min: \"0\",\n      placeholder: \"Quantity\",\n      value: this.state.quantity,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    companies: state.stocks.companyInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveTransaction\n})(StockForm); //no current company","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js"],"names":["React","DatePicker","connect","saveTransaction","StockForm","Component","constructor","props","state","symbol","quantity","buyDateString","price","todayPrice","open","change","e","onChange","target","name","value","setState","onSubmit","API_KEY","StockSymbol","toUpperCase","date","API_Call","console","log","qty","fetch","then","response","json","data","alert","Note","priceResponse","todayOpenPrice","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","todayPricez","object","createData","bind","preventDefault","handleChange","tempMonth","toString","tempDay","stringDate","buyDate","datePurchased","purchasePrice","datepurchased","purchaseprice","currentprice","render","mapStateToProps","companies","stocks","companyInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  state = {\n    symbol: \"\",\n    quantity: \"\",\n    buyDateString: \"2020-09-17\",\n    price: 0,\n    todayPrice: 0,\n    open:0\n  };\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  change = (e) => {\n    //recieves on change as props\n    this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n    //console.log(e.target.name);\n  };\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice, todayOpenPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice,\n      open:todayOpenPrice\n    };\n  }\n  onSubmit = (e) => {\n    const API_KEY = \"WUOT41WJEJHDWT6T\";\n    let StockSymbol = this.state.symbol.toUpperCase();\n    let date = this.state.buyDateString;\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    console.log(this.state.quantity);\n    let qty = this.state.quantity;\n    fetch(API_Call)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(\n        function (data) {\n          console.log(data);\n          if (\"Note\" in data) {\n            alert(data.Note);\n          } else if (\"Error Message\" in data) {\n            alert(\n              \"No Ticker exists for your input String Please input valid Ticker Symbol\"\n            );\n          } else {\n            console.log(date);\n            console.log(\"error here\");\n            var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n            var todayOpenPrice = data[\"Time Series (Daily)\"][date][\"1. open\"];\n            var today = new Date();\n            var dd = String(today.getDate() - 1).padStart(2, \"0\");\n            var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n            var yyyy = today.getFullYear();\n            today = yyyy + \"-\" + mm + \"-\" + dd;\n            var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n            this.setState({\n              price: priceResponse,\n              todayPrice: todayPricez,\n              symbol: StockSymbol,\n              quantity: qty,\n            });\n            var object = this.createData(\n              this.state.symbol,\n              this.state.buyDateString,\n              this.state.price,\n              this.state.quantity,\n              this.state.todayPrice\n            );\n            //console.log(object);\n            //very important to remember this will be what i pass into reducer\n            this.props.saveTransaction(object);\n            this.setState({\n              symbol: \"\",\n              quantity: \"\",\n              buyDateString: \"2020-09-17\",\n              price: 0,\n              todayPrice: 0,\n            });\n            this.props.onChange({\n              symbol: \"\",\n              quantity: \"\",\n              buyDateString: \"2020-09-17\",\n              price: 0,\n              todayPrice: 0,\n            });\n          }\n        }.bind(this)\n      );\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0,\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0,\n      });\n    //******************** */\n\n    //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n    //conect to redux store\n    //create action creator\n    //make sure i can get an object into database\n    //create fetch stocks  so i can list it in table\n    //make sure i can delete stocks if necesary\n    // add news api\n  };\n  handleChange = (date) => {\n    var tempMonth = \"\";\n    if (date.getMonth() + 1 < 10) {\n      tempMonth = \"0\" + (date.getMonth() + 1).toString();\n    } else {\n      tempMonth = (date.getMonth() + 1).toString();\n    }\n    var tempDay = \"\";\n    if (date.getDate() < 10) {\n      tempDay = \"0\" + date.getDate().toString();\n    } else {\n      tempDay = date.getDate().toString();\n    }\n    var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`;\n    //console.log(tempMonth);\n    this.setState({\n      buyDate: date,\n      buyDateString: stringDate,\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <label>What day did you buy stock?</label>\n        <DatePicker\n          selected={this.state.buyDate}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"symbol\"\n          placeholder=\"Ticker Symbol\"\n          value={this.state.symbol}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          min=\"0\"\n          placeholder=\"Quantity\"\n          value={this.state.quantity}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <button onClick={(e) => this.onSubmit(e)}>Submit</button>\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    companies: state.stocks.companyInfo,\n  };\n};\n\nexport default connect(mapStateToProps, { saveTransaction })(StockForm); //no current company\n"]},"metadata":{},"sourceType":"module"}