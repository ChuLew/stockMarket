{"ast":null,"code":"import _classCallCheck from \"/Users/mitchlew/Documents/Streaming/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mitchlew/Documents/Streaming/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport Log from './logger.js';\n\nvar LoggingControl = /*#__PURE__*/function () {\n  function LoggingControl() {\n    _classCallCheck(this, LoggingControl);\n  }\n\n  _createClass(LoggingControl, null, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        globalTag: Log.GLOBAL_TAG,\n        forceGlobalTag: Log.FORCE_GLOBAL_TAG,\n        enableVerbose: Log.ENABLE_VERBOSE,\n        enableDebug: Log.ENABLE_DEBUG,\n        enableInfo: Log.ENABLE_INFO,\n        enableWarn: Log.ENABLE_WARN,\n        enableError: Log.ENABLE_ERROR,\n        enableCallback: Log.ENABLE_CALLBACK\n      };\n    }\n  }, {\n    key: \"applyConfig\",\n    value: function applyConfig(config) {\n      Log.GLOBAL_TAG = config.globalTag;\n      Log.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n      Log.ENABLE_VERBOSE = config.enableVerbose;\n      Log.ENABLE_DEBUG = config.enableDebug;\n      Log.ENABLE_INFO = config.enableInfo;\n      Log.ENABLE_WARN = config.enableWarn;\n      Log.ENABLE_ERROR = config.enableError;\n      Log.ENABLE_CALLBACK = config.enableCallback;\n    }\n  }, {\n    key: \"_notifyChange\",\n    value: function _notifyChange() {\n      var emitter = LoggingControl.emitter;\n\n      if (emitter.listenerCount('change') > 0) {\n        var config = LoggingControl.getConfig();\n        emitter.emit('change', config);\n      }\n    }\n  }, {\n    key: \"registerListener\",\n    value: function registerListener(listener) {\n      LoggingControl.emitter.addListener('change', listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      LoggingControl.emitter.removeListener('change', listener);\n    }\n  }, {\n    key: \"addLogListener\",\n    value: function addLogListener(listener) {\n      Log.emitter.addListener('log', listener);\n\n      if (Log.emitter.listenerCount('log') > 0) {\n        Log.ENABLE_CALLBACK = true;\n\n        LoggingControl._notifyChange();\n      }\n    }\n  }, {\n    key: \"removeLogListener\",\n    value: function removeLogListener(listener) {\n      Log.emitter.removeListener('log', listener);\n\n      if (Log.emitter.listenerCount('log') === 0) {\n        Log.ENABLE_CALLBACK = false;\n\n        LoggingControl._notifyChange();\n      }\n    }\n  }, {\n    key: \"forceGlobalTag\",\n    get: function get() {\n      return Log.FORCE_GLOBAL_TAG;\n    },\n    set: function set(enable) {\n      Log.FORCE_GLOBAL_TAG = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"globalTag\",\n    get: function get() {\n      return Log.GLOBAL_TAG;\n    },\n    set: function set(tag) {\n      Log.GLOBAL_TAG = tag;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"enableAll\",\n    get: function get() {\n      return Log.ENABLE_VERBOSE && Log.ENABLE_DEBUG && Log.ENABLE_INFO && Log.ENABLE_WARN && Log.ENABLE_ERROR;\n    },\n    set: function set(enable) {\n      Log.ENABLE_VERBOSE = enable;\n      Log.ENABLE_DEBUG = enable;\n      Log.ENABLE_INFO = enable;\n      Log.ENABLE_WARN = enable;\n      Log.ENABLE_ERROR = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"enableDebug\",\n    get: function get() {\n      return Log.ENABLE_DEBUG;\n    },\n    set: function set(enable) {\n      Log.ENABLE_DEBUG = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"enableVerbose\",\n    get: function get() {\n      return Log.ENABLE_VERBOSE;\n    },\n    set: function set(enable) {\n      Log.ENABLE_VERBOSE = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"enableInfo\",\n    get: function get() {\n      return Log.ENABLE_INFO;\n    },\n    set: function set(enable) {\n      Log.ENABLE_INFO = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"enableWarn\",\n    get: function get() {\n      return Log.ENABLE_WARN;\n    },\n    set: function set(enable) {\n      Log.ENABLE_WARN = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }, {\n    key: \"enableError\",\n    get: function get() {\n      return Log.ENABLE_ERROR;\n    },\n    set: function set(enable) {\n      Log.ENABLE_ERROR = enable;\n\n      LoggingControl._notifyChange();\n    }\n  }]);\n\n  return LoggingControl;\n}();\n\nLoggingControl.emitter = new EventEmitter();\nexport default LoggingControl;","map":{"version":3,"sources":["/Users/mitchlew/Documents/Streaming/streams/client/node_modules/flv.js/src/utils/logging-control.js"],"names":["EventEmitter","Log","LoggingControl","globalTag","GLOBAL_TAG","forceGlobalTag","FORCE_GLOBAL_TAG","enableVerbose","ENABLE_VERBOSE","enableDebug","ENABLE_DEBUG","enableInfo","ENABLE_INFO","enableWarn","ENABLE_WARN","enableError","ENABLE_ERROR","enableCallback","ENABLE_CALLBACK","config","emitter","listenerCount","getConfig","emit","listener","addListener","removeListener","_notifyChange","enable","tag"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from './logger.js';\n\nclass LoggingControl {\n\n    static get forceGlobalTag() {\n        return Log.FORCE_GLOBAL_TAG;\n    }\n\n    static set forceGlobalTag(enable) {\n        Log.FORCE_GLOBAL_TAG = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get globalTag() {\n        return Log.GLOBAL_TAG;\n    }\n\n    static set globalTag(tag) {\n        Log.GLOBAL_TAG = tag;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableAll() {\n        return Log.ENABLE_VERBOSE\n            && Log.ENABLE_DEBUG\n            && Log.ENABLE_INFO\n            && Log.ENABLE_WARN\n            && Log.ENABLE_ERROR;\n    }\n\n    static set enableAll(enable) {\n        Log.ENABLE_VERBOSE = enable;\n        Log.ENABLE_DEBUG = enable;\n        Log.ENABLE_INFO = enable;\n        Log.ENABLE_WARN = enable;\n        Log.ENABLE_ERROR = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableDebug() {\n        return Log.ENABLE_DEBUG;\n    }\n\n    static set enableDebug(enable) {\n        Log.ENABLE_DEBUG = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableVerbose() {\n        return Log.ENABLE_VERBOSE;\n    }\n\n    static set enableVerbose(enable) {\n        Log.ENABLE_VERBOSE = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableInfo() {\n        return Log.ENABLE_INFO;\n    }\n\n    static set enableInfo(enable) {\n        Log.ENABLE_INFO = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableWarn() {\n        return Log.ENABLE_WARN;\n    }\n\n    static set enableWarn(enable) {\n        Log.ENABLE_WARN = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableError() {\n        return Log.ENABLE_ERROR;\n    }\n\n    static set enableError(enable) {\n        Log.ENABLE_ERROR = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static getConfig() {\n        return {\n            globalTag: Log.GLOBAL_TAG,\n            forceGlobalTag: Log.FORCE_GLOBAL_TAG,\n            enableVerbose: Log.ENABLE_VERBOSE,\n            enableDebug: Log.ENABLE_DEBUG,\n            enableInfo: Log.ENABLE_INFO,\n            enableWarn: Log.ENABLE_WARN,\n            enableError: Log.ENABLE_ERROR,\n            enableCallback: Log.ENABLE_CALLBACK\n        };\n    }\n\n    static applyConfig(config) {\n        Log.GLOBAL_TAG = config.globalTag;\n        Log.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n        Log.ENABLE_VERBOSE = config.enableVerbose;\n        Log.ENABLE_DEBUG = config.enableDebug;\n        Log.ENABLE_INFO = config.enableInfo;\n        Log.ENABLE_WARN = config.enableWarn;\n        Log.ENABLE_ERROR = config.enableError;\n        Log.ENABLE_CALLBACK = config.enableCallback;\n    }\n\n    static _notifyChange() {\n        let emitter = LoggingControl.emitter;\n\n        if (emitter.listenerCount('change') > 0) {\n            let config = LoggingControl.getConfig();\n            emitter.emit('change', config);\n        }\n    }\n\n    static registerListener(listener) {\n        LoggingControl.emitter.addListener('change', listener);\n    }\n\n    static removeListener(listener) {\n        LoggingControl.emitter.removeListener('change', listener);\n    }\n\n    static addLogListener(listener) {\n        Log.emitter.addListener('log', listener);\n        if (Log.emitter.listenerCount('log') > 0) {\n            Log.ENABLE_CALLBACK = true;\n            LoggingControl._notifyChange();\n        }\n    }\n\n    static removeLogListener(listener) {\n        Log.emitter.removeListener('log', listener);\n        if (Log.emitter.listenerCount('log') === 0) {\n            Log.ENABLE_CALLBACK = false;\n            LoggingControl._notifyChange();\n        }\n    }\n\n}\n\nLoggingControl.emitter = new EventEmitter();\n\nexport default LoggingControl;"]},"metadata":{},"sourceType":"module"}