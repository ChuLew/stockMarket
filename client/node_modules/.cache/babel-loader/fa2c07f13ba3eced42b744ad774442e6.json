{"ast":null,"code":"var _jsxFileName = \"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      symbol: \"\",\n      quantity: \"\",\n      buyDateString: \"2020-09-17\",\n      price: 0,\n      todayPrice: 0,\n      open: 0\n    };\n\n    this.change = e => {\n      //recieves on change as props\n      this.props.onChange({\n        [e.target.name]: e.target.value\n      });\n      this.setState({\n        [e.target.name]: e.target.value\n      }); //console.log(e.target.name);\n    };\n\n    this.onSubmit = e => {\n      console.log(\"buy date string\" + this.state.buyDateString);\n      const API_KEY = \"WUOT41WJEJHDWT6T\";\n      let StockSymbol = this.state.symbol.toUpperCase();\n      let date = this.state.buyDateString; //date breaks on weekends\n\n      let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n      console.log(this.state.quantity);\n      let qty = this.state.quantity;\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        if (\"Note\" in data) {\n          alert(data.Note);\n        } else if (\"Error Message\" in data) {\n          alert(\"No Ticker exists for your input String Please input valid Ticker Symbol\");\n        } else {\n          console.log(date);\n          var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n          var today = new Date(); //this code breaks as they dont trade on the weekends\n          //so if its sunday or monday  you cant take day before\n\n          var subtractday = 1;\n\n          if (today.getDay() == 0) {\n            subtractday = 2;\n          } else if (today.getDay() == 1) {\n            subtractday = 3;\n          }\n\n          var dd = String(today.getDate() - subtractday).padStart(2, \"0\");\n          var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n\n          var yyyy = today.getFullYear();\n          today = yyyy + \"-\" + mm + \"-\" + dd;\n          console.log(today);\n          var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n          var todayOpenPrice = data[\"Time Series (Daily)\"][date][\"1. open\"];\n          this.setState({\n            price: priceResponse,\n            todayPrice: todayPricez,\n            symbol: StockSymbol,\n            quantity: qty,\n            open: todayOpenPrice\n          });\n          var object = this.createData(this.state.symbol, this.state.buyDateString, this.state.price, this.state.quantity, this.state.todayPrice, this.state.open); //console.log(object);\n          //very important to remember this will be what i pass into reducer\n\n          this.props.saveTransaction(object);\n          this.setState({\n            symbol: \"\",\n            quantity: \"\",\n            buyDateString: \"2020-09-17\",\n            price: 0,\n            todayPrice: 0,\n            open: 0\n          });\n          this.props.onChange({\n            symbol: \"\",\n            quantity: \"\",\n            buyDateString: \"2020-09-17\",\n            price: 0,\n            todayPrice: 0,\n            open: 0\n          });\n        }\n      }.bind(this));\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0\n      }); //******************** */\n      //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n      //conect to redux store\n      //create action creator\n      //make sure i can get an object into database\n      //create fetch stocks  so i can list it in table\n      //make sure i can delete stocks if necesary\n      // add news api\n    };\n\n    this.handleChange = date => {\n      var tempMonth = \"\";\n\n      if (date.getMonth() + 1 < 10) {\n        tempMonth = \"0\" + (date.getMonth() + 1).toString();\n      } else {\n        tempMonth = (date.getMonth() + 1).toString();\n      } //handle weekednds\n\n\n      var tempDay = \"\";\n      var subtractDay = 0;\n\n      if (date.getDay() === 6) {\n        subtractDay = 1;\n      }\n\n      if (date.getDay() === 0) {\n        subtractDay = 2;\n      }\n\n      if (date.getDay() === 1) {\n        subtractDay = 3;\n      }\n\n      console.log(\"subtract day\" + subtractDay);\n      console.log(\"achieve subtractoin: \" + date.getDate() + 1);\n\n      if (date.getDate() < 10) {\n        tempDay = \"0\" + (parseInt(date.getDate, 10) - subtractDay).toString();\n        console.log(\"adjusted weekend trading date\" + date.getDate() - subtractDay);\n      } else {\n        tempDay = date.getDate().toString();\n      }\n\n      var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`; //console.log(tempMonth);\n\n      this.setState({\n        buyDate: date,\n        buyDateString: stringDate\n      });\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice, todayOpenPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice,\n      open: todayOpenPrice\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, \"What day did you buy stock?\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: this.state.buyDate,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"symbol\",\n      placeholder: \"Ticker Symbol\",\n      value: this.state.symbol,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"quantity\",\n      type: \"number\",\n      min: \"0\",\n      placeholder: \"Quantity\",\n      value: this.state.quantity,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    companies: state.stocks.companyInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveTransaction\n})(StockForm); //no current company","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js"],"names":["React","DatePicker","connect","saveTransaction","StockForm","Component","constructor","props","state","symbol","quantity","buyDateString","price","todayPrice","open","change","e","onChange","target","name","value","setState","onSubmit","console","log","API_KEY","StockSymbol","toUpperCase","date","API_Call","qty","fetch","then","response","json","data","alert","Note","priceResponse","today","Date","subtractday","getDay","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","todayPricez","todayOpenPrice","object","createData","bind","preventDefault","handleChange","tempMonth","toString","tempDay","subtractDay","parseInt","stringDate","buyDate","datePurchased","purchasePrice","datepurchased","purchaseprice","currentprice","render","mapStateToProps","companies","stocks","companyInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  state = {\n    symbol: \"\",\n    quantity: \"\",\n    buyDateString: \"2020-09-17\",\n    price: 0,\n    todayPrice: 0,\n    open:0\n  };\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  change = (e) => {\n    //recieves on change as props\n    this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n    //console.log(e.target.name);\n  };\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice, todayOpenPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice,\n      open:todayOpenPrice\n    };\n  }\n  onSubmit = (e) => {\n    console.log(\"buy date string\" + this.state.buyDateString)\n    const API_KEY = \"WUOT41WJEJHDWT6T\";\n    let StockSymbol = this.state.symbol.toUpperCase();\n    let date = this.state.buyDateString;\n    //date breaks on weekends\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    console.log(this.state.quantity);\n    let qty = this.state.quantity;\n    fetch(API_Call)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(\n        function (data) {\n          console.log(data);\n          if (\"Note\" in data) {\n            alert(data.Note);\n          } else if (\"Error Message\" in data) {\n            alert(\n              \"No Ticker exists for your input String Please input valid Ticker Symbol\"\n            );\n          } else {\n            console.log(date);\n            var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n            var today = new Date();\n            //this code breaks as they dont trade on the weekends\n            //so if its sunday or monday  you cant take day before\n            var subtractday = 1;\n            if(today.getDay()==0){\n              subtractday = 2;\n            }\n            else if (today.getDay()==1){\n              subtractday = 3;\n            }\n            var dd = String(today.getDate() - subtractday).padStart(2, \"0\");\n            var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n            var yyyy = today.getFullYear();\n            today = yyyy + \"-\" + mm + \"-\" + dd;\n            console.log(today)\n            var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n            var todayOpenPrice = data[\"Time Series (Daily)\"][date][\"1. open\"];\n            this.setState({\n              price: priceResponse,\n              todayPrice: todayPricez,\n              symbol: StockSymbol,\n              quantity: qty,\n              open:todayOpenPrice\n            });\n            var object = this.createData(\n              this.state.symbol,\n              this.state.buyDateString,\n              this.state.price,\n              this.state.quantity,\n              this.state.todayPrice,\n              this.state.open\n            );\n            //console.log(object);\n            //very important to remember this will be what i pass into reducer\n            this.props.saveTransaction(object);\n            this.setState({\n              symbol: \"\",\n              quantity: \"\",\n              buyDateString: \"2020-09-17\",\n              price: 0,\n              todayPrice: 0,\n              open:0\n            });\n            this.props.onChange({\n              symbol: \"\",\n              quantity: \"\",\n              buyDateString: \"2020-09-17\",\n              price: 0,\n              todayPrice: 0,\n              open:0\n            });\n          }\n        }.bind(this)\n      );\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0,\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0,\n      });\n    //******************** */\n\n    //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n    //conect to redux store\n    //create action creator\n    //make sure i can get an object into database\n    //create fetch stocks  so i can list it in table\n    //make sure i can delete stocks if necesary\n    // add news api\n  };\n  handleChange = (date) => {\n    var tempMonth = \"\";\n    if (date.getMonth() + 1 < 10) {\n      tempMonth = \"0\" + (date.getMonth() + 1).toString();\n    } else {\n      tempMonth = (date.getMonth() + 1).toString();\n    }\n    //handle weekednds\n    var tempDay = \"\";\n    var subtractDay = 0;\n    if (date.getDay() === 6){\n      subtractDay = 1;\n    }\n    if (date.getDay() === 0){\n      subtractDay = 2;\n    }\n    if (date.getDay() === 1){\n      subtractDay = 3;\n    }\n    console.log(\"subtract day\" + subtractDay)\n    console.log(\"achieve subtractoin: \"+date.getDate()+1)\n    if (date.getDate() < 10) {\n      tempDay = \"0\" + (parseInt(date.getDate, 10) - subtractDay).toString();\n      console.log(\"adjusted weekend trading date\"+date.getDate() - subtractDay)\n    } else {\n      tempDay = date.getDate().toString();\n    }\n    var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`;\n    //console.log(tempMonth);\n    this.setState({\n      buyDate: date,\n      buyDateString: stringDate,\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <label>What day did you buy stock?</label>\n        <DatePicker\n          selected={this.state.buyDate}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"symbol\"\n          placeholder=\"Ticker Symbol\"\n          value={this.state.symbol}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          min=\"0\"\n          placeholder=\"Quantity\"\n          value={this.state.quantity}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <button onClick={(e) => this.onSubmit(e)}>Submit</button>\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    companies: state.stocks.companyInfo,\n  };\n};\n\nexport default connect(mapStateToProps, { saveTransaction })(StockForm); //no current company\n"]},"metadata":{},"sourceType":"module"}