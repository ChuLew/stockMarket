{"ast":null,"code":"import _defineProperty from\"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import DatePicker from\"react-datepicker\";import\"react-datepicker/dist/react-datepicker.css\";import{connect}from\"react-redux\";import{saveTransaction}from\"../../actions\";var StockForm=/*#__PURE__*/function(_React$Component){_inherits(StockForm,_React$Component);var _super=_createSuper(StockForm);function StockForm(props){var _this;_classCallCheck(this,StockForm);_this=_super.call(this,props);_this.state={symbol:\"\",quantity:\"\",buyDateString:\"2020-09-17\",price:0,todayPrice:0,open:0};_this.change=function(e){//recieves on change as props\n_this.props.onChange(_defineProperty({},e.target.name,e.target.value));_this.setState(_defineProperty({},e.target.name,e.target.value));//console.log(e.target.name);\n};_this.onSubmit=function(e){console.log(\"buy date string\"+_this.state.buyDateString);var API_KEY=\"WUOT41WJEJHDWT6T\";var StockSymbol=_this.state.symbol.toUpperCase();var date=_this.state.buyDateString;//date breaks on weekends\nvar API_Call=\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\".concat(StockSymbol,\"&outputsize=compact&apikey=\").concat(API_KEY);console.log(_this.state.quantity);var qty=_this.state.quantity;fetch(API_Call).then(function(response){return response.json();}).then(function(data){console.log(data);if(\"Note\"in data){alert(data.Note);}else if(\"Error Message\"in data){alert(\"No Ticker exists for your input String Please input valid Ticker Symbol\");}else{console.log(date);var priceResponse=data[\"Time Series (Daily)\"][date][\"4. close\"];var today=new Date();//this code breaks as they dont trade on the weekends\n//so if its sunday or monday  you cant take day before\nvar subtractday=1;if(today.getDay()==0){subtractday=2;}else if(today.getDay()==1){subtractday=3;}var dd=String(today.getDate()-subtractday).padStart(2,\"0\");var mm=String(today.getMonth()+1).padStart(2,\"0\");//January is 0!\nvar yyyy=today.getFullYear();today=yyyy+\"-\"+mm+\"-\"+dd;console.log(today);var todayPricez=data[\"Time Series (Daily)\"][today][\"4. close\"];var todayOpenPrice=data[\"Time Series (Daily)\"][date][\"1. open\"];this.setState({price:priceResponse,todayPrice:todayPricez,symbol:StockSymbol,quantity:qty,open:todayOpenPrice});var object=this.createData(this.state.symbol,this.state.buyDateString,this.state.price,this.state.quantity,this.state.todayPrice,this.state.open);console.log(object);//very important to remember this will be what i pass into reducer\nthis.props.saveTransaction(object);this.setState({symbol:\"\",quantity:\"\",buyDateString:\"2020-09-17\",price:0,todayPrice:0,open:0});this.props.onChange({symbol:\"\",quantity:\"\",buyDateString:\"2020-09-17\",price:0,todayPrice:0,open:0});}}.bind(_assertThisInitialized(_this)));e.preventDefault();_this.setState({symbol:\"\",quantity:\"\",buyDateString:\"2020-09-17\",price:0,todayPrice:0});_this.props.onChange({symbol:\"\",quantity:\"\",buyDateString:\"2020-09-17\",price:0,todayPrice:0});//******************** */\n//now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n//conect to redux store\n//create action creator\n//make sure i can get an object into database\n//create fetch stocks  so i can list it in table\n//make sure i can delete stocks if necesary\n// add news api\n};_this.handleChange=function(date){var tempMonth=\"\";if(date.getMonth()+1<10){tempMonth=\"0\"+(date.getMonth()+1).toString();}else{tempMonth=(date.getMonth()+1).toString();}//handle weekednds\nvar tempDay=\"\";var subtractDay=0;if(date.getDay()===6){subtractDay=1;}if(date.getDay()===0){subtractDay=2;}if(date.getDay()===1){subtractDay=3;}//also issue if its begging of month LOLOLOL not gonna handle that #EDGE CASE\nif(date.getDate()<10){tempDay=\"0\"+(date.getDate()-subtractDay).toString();}else{tempDay=(date.getDate()-subtractDay).toString();}var stringDate=\"\".concat(date.getFullYear().toString(),\"-\").concat(tempMonth,\"-\").concat(tempDay);//console.log(tempMonth);\n_this.setState({buyDate:date,buyDateString:stringDate});};_this.onSubmit=_this.onSubmit.bind(_assertThisInitialized(_this));return _this;}_createClass(StockForm,[{key:\"createData\",// resets data but i want additional functionality\n// here i want to take state data and put it into object\n//pass that object into action creator and dispatch it to database\n//then i want to pull the data from database and dispaly it on Orders\n//refer to action creator of steram create it creates and objects and posts it to the api\nvalue:function createData(symbol,datePurchased,purchasePrice,qty,todayPrice,todayOpenPrice){return{symbol:symbol.toUpperCase(),datepurchased:datePurchased,purchaseprice:purchasePrice,quantity:qty,currentprice:todayPrice,opentoday:todayOpenPrice};}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(\"label\",null,\"What day did you buy stock?\"),/*#__PURE__*/React.createElement(DatePicker,{selected:this.state.buyDate,onChange:this.handleChange}),/*#__PURE__*/React.createElement(\"input\",{name:\"symbol\",placeholder:\"Ticker Symbol\",value:this.state.symbol,onChange:function onChange(e){return _this2.change(e);}}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"input\",{name:\"quantity\",type:\"number\",min:\"0\",placeholder:\"Quantity\",value:this.state.quantity,onChange:function onChange(e){return _this2.change(e);}}),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(e){return _this2.onSubmit(e);}},\"Submit\"));}}]);return StockForm;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{companies:state.stocks.companyInfo};};export default connect(mapStateToProps,{saveTransaction:saveTransaction})(StockForm);//no current company","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js"],"names":["React","DatePicker","connect","saveTransaction","StockForm","props","state","symbol","quantity","buyDateString","price","todayPrice","open","change","e","onChange","target","name","value","setState","onSubmit","console","log","API_KEY","StockSymbol","toUpperCase","date","API_Call","qty","fetch","then","response","json","data","alert","Note","priceResponse","today","Date","subtractday","getDay","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","todayPricez","todayOpenPrice","object","createData","bind","preventDefault","handleChange","tempMonth","toString","tempDay","subtractDay","stringDate","buyDate","datePurchased","purchasePrice","datepurchased","purchaseprice","currentprice","opentoday","Component","mapStateToProps","companies","stocks","companyInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  state = {\n    symbol: \"\",\n    quantity: \"\",\n    buyDateString: \"2020-09-17\",\n    price: 0,\n    todayPrice: 0,\n    open:0\n  };\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  change = (e) => {\n    //recieves on change as props\n    this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n    //console.log(e.target.name);\n  };\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice, todayOpenPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice,\n      opentoday:todayOpenPrice\n    };\n  }\n  onSubmit = (e) => {\n    console.log(\"buy date string\" + this.state.buyDateString)\n    const API_KEY = \"WUOT41WJEJHDWT6T\";\n    let StockSymbol = this.state.symbol.toUpperCase();\n    let date = this.state.buyDateString;\n    //date breaks on weekends\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    console.log(this.state.quantity);\n    let qty = this.state.quantity;\n    fetch(API_Call)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(\n        function (data) {\n          console.log(data);\n          if (\"Note\" in data) {\n            alert(data.Note);\n          } else if (\"Error Message\" in data) {\n            alert(\n              \"No Ticker exists for your input String Please input valid Ticker Symbol\"\n            );\n          } else {\n            console.log(date);\n            var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n            var today = new Date();\n            //this code breaks as they dont trade on the weekends\n            //so if its sunday or monday  you cant take day before\n            var subtractday = 1;\n            if(today.getDay()==0){\n              subtractday = 2;\n            }\n            else if (today.getDay()==1){\n              subtractday = 3;\n            }\n            var dd = String(today.getDate() - subtractday).padStart(2, \"0\");\n            var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n            var yyyy = today.getFullYear();\n            today = yyyy + \"-\" + mm + \"-\" + dd;\n            console.log(today)\n            var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n            var todayOpenPrice = data[\"Time Series (Daily)\"][date][\"1. open\"];\n            this.setState({\n              price: priceResponse,\n              todayPrice: todayPricez,\n              symbol: StockSymbol,\n              quantity: qty,\n              open:todayOpenPrice\n            });\n            var object = this.createData(\n              this.state.symbol,\n              this.state.buyDateString,\n              this.state.price,\n              this.state.quantity,\n              this.state.todayPrice,\n              this.state.open\n            );\n            console.log(object);\n            //very important to remember this will be what i pass into reducer\n            this.props.saveTransaction(object);\n            this.setState({\n              symbol: \"\",\n              quantity: \"\",\n              buyDateString: \"2020-09-17\",\n              price: 0,\n              todayPrice: 0,\n              open:0\n            });\n            this.props.onChange({\n              symbol: \"\",\n              quantity: \"\",\n              buyDateString: \"2020-09-17\",\n              price: 0,\n              todayPrice: 0,\n              open:0\n            });\n          }\n        }.bind(this)\n      );\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0,\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\",\n        buyDateString: \"2020-09-17\",\n        price: 0,\n        todayPrice: 0,\n      });\n    //******************** */\n\n    //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n    //conect to redux store\n    //create action creator\n    //make sure i can get an object into database\n    //create fetch stocks  so i can list it in table\n    //make sure i can delete stocks if necesary\n    // add news api\n  };\n  handleChange = (date) => {\n    var tempMonth = \"\";\n    if (date.getMonth() + 1 < 10) {\n      tempMonth = \"0\" + (date.getMonth() + 1).toString();\n    } else {\n      tempMonth = (date.getMonth() + 1).toString();\n    }\n    //handle weekednds\n    var tempDay = \"\";\n    var subtractDay = 0;\n    if (date.getDay() === 6){\n      subtractDay = 1;\n    }\n    if (date.getDay() === 0){\n      subtractDay = 2;\n    }\n    if (date.getDay() === 1){\n      subtractDay = 3;\n    }\n    //also issue if its begging of month LOLOLOL not gonna handle that #EDGE CASE\n    if (date.getDate() < 10) {\n      tempDay = \"0\" + (date.getDate() - subtractDay).toString();\n      \n    } else {\n      tempDay = (date.getDate()- subtractDay).toString();\n    }\n    var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`;\n    //console.log(tempMonth);\n    this.setState({\n      buyDate: date,\n      buyDateString: stringDate,\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <label>What day did you buy stock?</label>\n        <DatePicker\n          selected={this.state.buyDate}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"symbol\"\n          placeholder=\"Ticker Symbol\"\n          value={this.state.symbol}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          min=\"0\"\n          placeholder=\"Quantity\"\n          value={this.state.quantity}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <button onClick={(e) => this.onSubmit(e)}>Submit</button>\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    companies: state.stocks.companyInfo,\n  };\n};\n\nexport default connect(mapStateToProps, { saveTransaction })(StockForm); //no current company\n"]},"metadata":{},"sourceType":"module"}