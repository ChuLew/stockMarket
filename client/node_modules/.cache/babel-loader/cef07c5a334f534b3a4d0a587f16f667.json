{"ast":null,"code":"var _jsxFileName = \"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/dashboard/Chart.js\";\nimport React from \"react\";\nimport { ResponsiveContainer } from \"recharts\";\nimport Title from \"./Title\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { getStocks, apiRunOut } from \"../actions\";\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stockChartXValues: [],\n      stockChartYValues: []\n    };\n  }\n\n  wait(ms) {\n    var start = new Date().getTime();\n    var end = start;\n\n    while (end < start + ms) {\n      end = new Date().getTime();\n    }\n  }\n\n  componentDidMount() {\n    this.props.getStocks(this.props.currCompany);\n    this.wait(1000);\n    this.fetchStock();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currCompany !== this.props.currCompany) {\n      this.wait(1000);\n      console.log(\"2nd api used\");\n      this.props.apiRunOut(this.props.currCompany);\n    }\n  }\n\n  fetchStock() {\n    console.log(this.props.historics);\n    console.log(\"historics reached\");\n    let stockChartXValuesFunction = [];\n    let stockChartYValuesFunction = [];\n\n    for (var key in this.props.historics) {\n      stockChartXValuesFunction.push(key);\n      stockChartYValuesFunction.push(this.props.historics[key][\"1. open\"]);\n    }\n\n    this.setState({\n      stockChartXValues: stockChartXValuesFunction,\n      stockChartYValues: stockChartYValuesFunction\n    });\n    console.log(this.props.historics);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"Today\"), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Plot, {\n      data: [{\n        x: this.state.stockChartXValues,\n        y: this.state.stockChartYValues,\n        type: \"scatter\",\n        mode: \"lines+markers\",\n        marker: {\n          color: \"red\"\n        }\n      }],\n      layout: {\n        width: 850,\n        height: 440,\n        title: this.props.currCompany\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    currCompany: state.stocks.currentCompany,\n    historics: state.stocks.companyInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getStocks,\n  apiRunOut\n})(Chart);","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/dashboard/Chart.js"],"names":["React","ResponsiveContainer","Title","Plot","connect","getStocks","apiRunOut","Chart","Component","constructor","props","state","stockChartXValues","stockChartYValues","wait","ms","start","Date","getTime","end","componentDidMount","currCompany","fetchStock","componentDidUpdate","prevProps","console","log","historics","stockChartXValuesFunction","stockChartYValuesFunction","key","push","setState","render","x","y","type","mode","marker","color","width","height","title","mapStateToProps","stocks","currentCompany","companyInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ResponsiveContainer } from \"recharts\";\nimport Title from \"./Title\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { getStocks,apiRunOut } from \"../actions\";\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [],\n    };\n  }\n  wait(ms){\n    var start = new Date().getTime();\n    var end = start;\n    while(end < start + ms) {\n      end = new Date().getTime();\n   }\n }\n  componentDidMount() {\n    this.props.getStocks(this.props.currCompany);\n    this.wait(1000);\n    this.fetchStock();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.currCompany !== this.props.currCompany) {\n      this.wait(1000);\n      console.log(\"2nd api used\");\n      this.props.apiRunOut(this.props.currCompany);\n    }\n  }\n\n  fetchStock() {\n    console.log(this.props.historics);\n    console.log(\"historics reached\")\n    let stockChartXValuesFunction = [];\n    let stockChartYValuesFunction = [];\n    for (var key in this.props.historics) {\n      stockChartXValuesFunction.push(key);\n      stockChartYValuesFunction.push(this.props.historics[key][\"1. open\"]);\n    }\n    this.setState({\n      stockChartXValues: stockChartXValuesFunction,\n      stockChartYValues: stockChartYValuesFunction,\n    });\n    console.log(this.props.historics);\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Title>Today</Title>\n        <ResponsiveContainer>\n          <Plot\n            data={[\n              {\n                x: this.state.stockChartXValues,\n                y: this.state.stockChartYValues,\n                type: \"scatter\",\n                mode: \"lines+markers\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            layout={{ width: 850, height: 440, title: this.props.currCompany }}\n          />\n        </ResponsiveContainer>\n      </React.Fragment>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    currCompany: state.stocks.currentCompany,\n    historics: state.stocks.companyInfo,\n  };\n};\nexport default connect(mapStateToProps, { getStocks,apiRunOut })(Chart);\n"]},"metadata":{},"sourceType":"module"}