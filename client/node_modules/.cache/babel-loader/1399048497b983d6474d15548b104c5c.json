{"ast":null,"code":"import streams from \"../apis/streams\"; // eslint-disable-next-line\n\nimport stock from \"../apis/stock\";\nimport history from \"../history\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM, CREATE_PERSON, EDIT_HOLDING, CURRENT_PERSON, GET_STOCK_INFO } from \"./types\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n}; // export const getStocks = async company  => {\n//   const API_KEY = '82N2UO66AVHA2EFY';\n//   const response = await stock.get('/search', {\n//     params:{\n//       function:'TIME_SERIES_DAILY_ADJUSTED',\n//       symbol:company, //this might be preconfigured but we want to pass in a stock we want to search for now lets keep this \n//       apikey:API_KEY\n//      },\n//   });\n//   console.log(response.data['Time Series (Daily)']);\n// };\n\nexport const getStocks = () => async dispatch => {\n  const response = await streams.get(\"/api/streams\");\n  console.log(response.data);\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const createPerson = object => async (dispatch, getState) => {\n  const response = await streams.post(\"/api/persons\", { ...object\n  });\n  dispatch({\n    type: CREATE_PERSON,\n    payload: response.data\n  });\n};\nexport const currentPerson = userid => {\n  return {\n    type: CURRENT_PERSON,\n    payload: userid\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post(\"/api/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/api/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/api/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/api/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/api/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push(\"/\");\n};","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/actions/index.js"],"names":["streams","stock","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","CREATE_PERSON","EDIT_HOLDING","CURRENT_PERSON","GET_STOCK_INFO","signIn","userId","type","payload","signOut","getStocks","dispatch","response","get","console","log","data","createPerson","object","getState","post","currentPerson","userid","createStream","formValues","auth","push","fetchStreams","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"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","sourcesContent":["import streams from \"../apis/streams\";\n// eslint-disable-next-line\nimport stock from \"../apis/stock\";\nimport history from \"../history\";\n\nimport {\n  SIGN_IN,\n  SIGN_OUT,\n  CREATE_STREAM,\n  FETCH_STREAMS,\n  FETCH_STREAM,\n  DELETE_STREAM,\n  EDIT_STREAM,\n  CREATE_PERSON,\n  EDIT_HOLDING,\n  CURRENT_PERSON,\n  GET_STOCK_INFO\n} from \"./types\";\n\n\nexport const signIn = (userId) => {\n  return {\n    type: SIGN_IN,\n    payload: userId,\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT,\n  };\n};\n\n// export const getStocks = async company  => {\n//   const API_KEY = '82N2UO66AVHA2EFY';\n//   const response = await stock.get('/search', {\n//     params:{\n//       function:'TIME_SERIES_DAILY_ADJUSTED',\n//       symbol:company, //this might be preconfigured but we want to pass in a stock we want to search for now lets keep this \n//       apikey:API_KEY\n//      },\n//   });\n//   console.log(response.data['Time Series (Daily)']);\n// };\n\nexport const getStocks = () => async (dispatch) => {\n  const response = await streams.get(\"/api/streams\");\nconsole.log(response.data)\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const createPerson = (object) => async(dispatch,getState)=>{\n  const response = await streams.post(\"/api/persons\",{...object})\n  dispatch({type:CREATE_PERSON, payload:response.data})\n}\nexport const currentPerson = (userid) => {\n  return {\n    type:CURRENT_PERSON,\n    payload:userid\n  }\n}\nexport const createStream = (formValues) => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  const response = await streams.post(\"/api/streams\", {\n    ...formValues,\n    userId,\n  });\n\n  dispatch({ type: CREATE_STREAM, payload: response.data });\n  history.push(\"/\");\n};\n\nexport const fetchStreams = () => async (dispatch) => {\n  const response = await streams.get(\"/api/streams\");\n\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = (id) => async (dispatch) => {\n  const response = await streams.get(`/api/streams/${id}`);\n\n  dispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async (dispatch) => {\n  const response = await streams.patch(`/api/streams/${id}`, formValues);\n\n  dispatch({ type: EDIT_STREAM, payload: response.data });\n  history.push(\"/\");\n};\n\nexport const deleteStream = (id) => async (dispatch) => {\n  await streams.delete(`/api/streams/${id}`);\n\n  dispatch({ type: DELETE_STREAM, payload: id });\n  history.push(\"/\");\n};\n"]},"metadata":{},"sourceType":"module"}