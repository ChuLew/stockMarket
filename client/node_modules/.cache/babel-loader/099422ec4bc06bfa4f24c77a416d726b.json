{"ast":null,"code":"var _jsxFileName = \"/Users/mitchlew/Documents/Udemy/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 20\n        }\n      }, \" Loading...\");\n    }\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/mitchlew/Documents/Udemy/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","fetchStream","StreamShow","Component","componentDidMount","props","match","params","id","render","stream","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAGA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAwC;AACpCC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,KAAL,CAAWJ,WAAX,CAAuB,KAAKI,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACH;;AACDC,EAAAA,MAAM,GAAE;AACJ,QAAG,CAAC,KAAKJ,KAAL,CAAWK,MAAf,EAAsB;AAClB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACH;AACJ;;AARmC;;AAWxC,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAoB;AACxC,SAAO;AAACH,IAAAA,MAAM,EAACE,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACP,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAR,GAAP;AACH,CAFD;;AAIA,eAAeR,OAAO,CAACW,eAAD,EAAiB;AAACV,EAAAA;AAAD,CAAjB,CAAP,CAAuCC,UAAvC,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {fetchStream} from '../../actions';\n\n\nclass StreamShow extends React.Component{\n    componentDidMount(){\n        this.props.fetchStream(this.props.match.params.id);\n    }\n    render(){\n        if(!this.props.stream){\n            return <div> Loading...</div>\n        }\n    }\n}\n\nconst mapStateToProps = (state,ownProps) => {\n    return {stream:state.streams[ownProps.match.params.id]};\n}\n\nexport default connect(mapStateToProps,{fetchStream})(StreamShow);"]},"metadata":{},"sourceType":"module"}