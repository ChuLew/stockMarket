{"ast":null,"code":"var _jsxFileName = \"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      symbol: \"\",\n      quantity: \"\",\n      buyDateString: \"2020-09-17\",\n      price: 0\n    };\n\n    this.change = e => {\n      //recieves on change as props\n      this.props.onChange({\n        [e.target.name]: e.target.value\n      });\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      console.log(e.target.name);\n    };\n\n    this.onSubmit = e => {\n      const API_KEY = \"HGJWFG4N8AQ66ICD\";\n      let StockSymbol = this.state.symbol.toUpperCase();\n      let date = this.state.buyDateString;\n      let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        if (\"Note\" in data) {\n          alert(data.Note);\n        } else if (\"Error Message\" in data) {\n          alert(\"No Ticker exists for your input String Please input valid Ticker Symbol\");\n        } else {\n          var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n          this.setState({\n            price: priceResponse\n          });\n        }\n      }.bind(this));\n      var object = this.createData(this.state.symbol, this.state.buyDateString, this.state.price, this.state.quantity);\n      console.log(object); //very important to remember this will be what i pass into reducer\n\n      this.props.saveTransaction(object); //******************** */\n\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\"\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\"\n      }); //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table. \n      //conect to redux store\n      //create action creator\n      //make sure i can get an object into database\n      //create fetch stocks  so i can list it in table\n      //make sure i can delete stocks if necesary\n      // add news api\n    };\n\n    this.handleChange = date => {\n      var tempMonth = \"\";\n\n      if (date.getMonth() + 1 < 10) {\n        tempMonth = \"0\" + (date.getMonth() + 1).toString();\n      } else {\n        tempMonth = (date.getMonth() + 1).toString();\n      }\n\n      var tempDay = \"\";\n\n      if (date.getDate() < 10) {\n        tempDay = \"0\" + date.getDate().toString();\n      } else {\n        tempDay = date.getDate().toString();\n      }\n\n      var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`;\n      console.log(tempMonth);\n      this.setState({\n        buyDate: date,\n        buyDateString: stringDate\n      });\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty) {\n    return {\n      symbol: symbol,\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, \"What day did you buy stock?\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: this.state.buyDate,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"symbol\",\n      placeholder: \"Ticker Symbol\",\n      value: this.state.symbol,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"quantity\",\n      type: \"number\",\n      min: \"0\",\n      placeholder: \"Quantity\",\n      value: this.state.quantity,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    companies: state.stocks.companyInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveTransaction\n})(StockForm); //no current company","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js"],"names":["React","DatePicker","connect","saveTransaction","StockForm","Component","constructor","props","state","symbol","quantity","buyDateString","price","change","e","onChange","target","name","value","setState","console","log","onSubmit","API_KEY","StockSymbol","toUpperCase","date","API_Call","fetch","then","response","json","data","alert","Note","priceResponse","bind","object","createData","preventDefault","handleChange","tempMonth","getMonth","toString","tempDay","getDate","stringDate","getFullYear","buyDate","datePurchased","purchasePrice","qty","datepurchased","purchaseprice","render","mapStateToProps","companies","stocks","companyInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\n\nclass StockForm extends React.Component {\n  state = {\n    symbol: \"\",\n    quantity: \"\",\n    buyDateString: \"2020-09-17\",\n    price: 0,\n  };\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  change = (e) => {\n    //recieves on change as props\n    this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n    console.log(e.target.name);\n  };\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty) {\n    return { symbol:symbol, datepurchased:datePurchased, purchaseprice:purchasePrice, quantity:qty };\n  }\n  onSubmit = (e) => {\n    const API_KEY = \"HGJWFG4N8AQ66ICD\";\n    let StockSymbol = this.state.symbol.toUpperCase();\n    let date = this.state.buyDateString;\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    fetch(API_Call)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(\n        function (data) {\n          console.log(data);\n          if (\"Note\" in data) {\n            alert(data.Note);\n          } else if (\"Error Message\" in data) {\n            alert(\n              \"No Ticker exists for your input String Please input valid Ticker Symbol\"\n            );\n          } else {\n            var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n            this.setState({ price: priceResponse });\n          }\n        }.bind(this)\n      );\n      var object = this.createData(this.state.symbol,this.state.buyDateString,this.state.price,this.state.quantity);\n      console.log(object);\n    //very important to remember this will be what i pass into reducer\n      this.props.saveTransaction(object);\n    //******************** */\n    e.preventDefault();\n    this.setState({\n      symbol: \"\",\n      quantity: \"\",\n    });\n    this.props.onChange({\n      symbol: \"\",\n      quantity: \"\",\n    });\n    //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table. \n    //conect to redux store\n    //create action creator\n    //make sure i can get an object into database\n    //create fetch stocks  so i can list it in table\n    //make sure i can delete stocks if necesary\n    // add news api\n  \n  };\n  handleChange = (date) => {\n    var tempMonth = \"\";\n    if (date.getMonth() + 1 < 10) {\n      tempMonth = \"0\" + (date.getMonth() + 1).toString();\n    } else {\n      tempMonth = (date.getMonth() + 1).toString();\n    }\n    var tempDay = \"\";\n    if (date.getDate() < 10) {\n      tempDay = \"0\" + date.getDate().toString();\n    } else {\n      tempDay = date.getDate().toString();\n    }\n    var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`;\n    console.log(tempMonth);\n    this.setState({\n      buyDate: date,\n      buyDateString: stringDate,\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <label>What day did you buy stock?</label>\n        <DatePicker\n          selected={this.state.buyDate}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"symbol\"\n          placeholder=\"Ticker Symbol\"\n          value={this.state.symbol}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          min=\"0\"\n          placeholder=\"Quantity\"\n          value={this.state.quantity}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <button onClick={(e) => this.onSubmit(e)}>Submit</button>\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    companies:state.stocks.companyInfo\n  };\n};\n\nexport default connect(mapStateToProps,{saveTransaction})(StockForm); //no current company\n"]},"metadata":{},"sourceType":"module"}