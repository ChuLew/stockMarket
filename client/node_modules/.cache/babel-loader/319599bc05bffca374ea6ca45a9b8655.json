{"ast":null,"code":"var _jsxFileName = \"/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      symbol: \"\",\n      quantity: \"\",\n      buyDateString: \"2020-09-17\",\n      price: 0,\n      todayPrice: 0\n    };\n\n    this.change = e => {\n      //recieves on change as props\n      this.props.onChange({\n        [e.target.name]: e.target.value\n      });\n      this.setState({\n        [e.target.name]: e.target.value\n      }); //console.log(e.target.name);\n    };\n\n    this.onSubmit = e => {\n      const API_KEY = \"WUOT41WJEJHDWT6T\";\n      let StockSymbol = this.state.symbol.toUpperCase();\n      let date = this.state.buyDateString;\n      let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        if (\"Note\" in data) {\n          alert(data.Note);\n        } else if (\"Error Message\" in data) {\n          alert(\"No Ticker exists for your input String Please input valid Ticker Symbol\");\n        } else {\n          var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n          var today = new Date();\n          var dd = String(today.getDate() - 1).padStart(2, \"0\");\n          var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n\n          var yyyy = today.getFullYear();\n          today = yyyy + \"-\" + mm + \"-\" + dd;\n          var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n          this.setState({\n            price: priceResponse,\n            todayPrice: todayPricez,\n            symbol: StockSymbol,\n            quantity: this.state.quantity\n          });\n          console.log(this.state.qty);\n          var object = this.createData(this.state.symbol, this.state.buyDateString, this.state.price, this.state.quantity, this.state.todayPrice); //console.log(object);\n          //very important to remember this will be what i pass into reducer\n\n          this.props.saveTransaction(object);\n        }\n      }.bind(this)); //******************** */\n\n      e.preventDefault();\n      this.setState({\n        symbol: \"\",\n        quantity: \"\"\n      });\n      this.props.onChange({\n        symbol: \"\",\n        quantity: \"\"\n      }); //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n      //conect to redux store\n      //create action creator\n      //make sure i can get an object into database\n      //create fetch stocks  so i can list it in table\n      //make sure i can delete stocks if necesary\n      // add news api\n    };\n\n    this.handleChange = date => {\n      var tempMonth = \"\";\n\n      if (date.getMonth() + 1 < 10) {\n        tempMonth = \"0\" + (date.getMonth() + 1).toString();\n      } else {\n        tempMonth = (date.getMonth() + 1).toString();\n      }\n\n      var tempDay = \"\";\n\n      if (date.getDate() < 10) {\n        tempDay = \"0\" + date.getDate().toString();\n      } else {\n        tempDay = date.getDate().toString();\n      }\n\n      var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`; //console.log(tempMonth);\n\n      this.setState({\n        buyDate: date,\n        buyDateString: stringDate\n      });\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"What day did you buy stock?\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: this.state.buyDate,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"symbol\",\n      placeholder: \"Ticker Symbol\",\n      value: this.state.symbol,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"quantity\",\n      type: \"number\",\n      min: \"0\",\n      placeholder: \"Quantity\",\n      value: this.state.quantity,\n      onChange: e => this.change(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.onSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    companies: state.stocks.companyInfo\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveTransaction\n})(StockForm); //no current company","map":{"version":3,"sources":["/Users/mitchlew/Documents/workspace-spring-tool-suite-4-4.6.1.RELEASE/Stock/client/src/components/streams/StockForm.js"],"names":["React","DatePicker","connect","saveTransaction","StockForm","Component","constructor","props","state","symbol","quantity","buyDateString","price","todayPrice","change","e","onChange","target","name","value","setState","onSubmit","API_KEY","StockSymbol","toUpperCase","date","API_Call","fetch","then","response","json","data","console","log","alert","Note","priceResponse","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","todayPricez","qty","object","createData","bind","preventDefault","handleChange","tempMonth","toString","tempDay","stringDate","buyDate","datePurchased","purchasePrice","datepurchased","purchaseprice","currentprice","render","mapStateToProps","companies","stocks","companyInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { connect } from \"react-redux\";\nimport { saveTransaction } from \"../../actions\";\n\nclass StockForm extends React.Component {\n  state = {\n    symbol: \"\",\n    quantity: \"\",\n    buyDateString: \"2020-09-17\",\n    price: 0,\n    todayPrice: 0,\n  };\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  change = (e) => {\n    //recieves on change as props\n    this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n    //console.log(e.target.name);\n  };\n  // resets data but i want additional functionality\n  // here i want to take state data and put it into object\n  //pass that object into action creator and dispatch it to database\n  //then i want to pull the data from database and dispaly it on Orders\n  //refer to action creator of steram create it creates and objects and posts it to the api\n  createData(symbol, datePurchased, purchasePrice, qty, todayPrice) {\n    return {\n      symbol: symbol.toUpperCase(),\n      datepurchased: datePurchased,\n      purchaseprice: purchasePrice,\n      quantity: qty,\n      currentprice: todayPrice,\n    };\n  }\n  onSubmit = (e) => {\n    const API_KEY = \"WUOT41WJEJHDWT6T\";\n    let StockSymbol = this.state.symbol.toUpperCase();\n    let date = this.state.buyDateString;\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\n    fetch(API_Call)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(\n        function (data) {\n          console.log(data);\n          if (\"Note\" in data) {\n            alert(data.Note);\n          } else if (\"Error Message\" in data) {\n            alert(\n              \"No Ticker exists for your input String Please input valid Ticker Symbol\"\n            );\n          } else {\n            var priceResponse = data[\"Time Series (Daily)\"][date][\"4. close\"];\n            var today = new Date();\n            var dd = String(today.getDate() - 1).padStart(2, \"0\");\n            var mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n            var yyyy = today.getFullYear();\n            today = yyyy + \"-\" + mm + \"-\" + dd;\n            var todayPricez = data[\"Time Series (Daily)\"][today][\"4. close\"];\n\n            this.setState({ price: priceResponse, todayPrice: todayPricez ,symbol:StockSymbol,quantity:this.state.quantity});\n\n            console.log(this.state.qty)\n            var object = this.createData(\n              this.state.symbol,\n              this.state.buyDateString,\n              this.state.price,\n              this.state.quantity,\n              this.state.todayPrice\n            );\n            //console.log(object);\n            //very important to remember this will be what i pass into reducer\n            this.props.saveTransaction(object);\n          }\n        }.bind(this)\n      );\n\n    //******************** */\n    e.preventDefault();\n    this.setState({\n      symbol: \"\",\n      quantity: \"\",\n    });\n    this.props.onChange({\n      symbol: \"\",\n      quantity: \"\",\n    });\n    //now i need to sent this shit to the DATABASE RECIEVE IT and list that shit it the table.\n    //conect to redux store\n    //create action creator\n    //make sure i can get an object into database\n    //create fetch stocks  so i can list it in table\n    //make sure i can delete stocks if necesary\n    // add news api\n  };\n  handleChange = (date) => {\n    var tempMonth = \"\";\n    if (date.getMonth() + 1 < 10) {\n      tempMonth = \"0\" + (date.getMonth() + 1).toString();\n    } else {\n      tempMonth = (date.getMonth() + 1).toString();\n    }\n    var tempDay = \"\";\n    if (date.getDate() < 10) {\n      tempDay = \"0\" + date.getDate().toString();\n    } else {\n      tempDay = date.getDate().toString();\n    }\n    var stringDate = `${date.getFullYear().toString()}-${tempMonth}-${tempDay}`;\n    //console.log(tempMonth);\n    this.setState({\n      buyDate: date,\n      buyDateString: stringDate,\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <label>What day did you buy stock?</label>\n        <DatePicker\n          selected={this.state.buyDate}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"symbol\"\n          placeholder=\"Ticker Symbol\"\n          value={this.state.symbol}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <input\n          name=\"quantity\"\n          type=\"number\"\n          min=\"0\"\n          placeholder=\"Quantity\"\n          value={this.state.quantity}\n          onChange={(e) => this.change(e)}\n        />\n        <br />\n        <button onClick={(e) => this.onSubmit(e)}>Submit</button>\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    companies: state.stocks.companyInfo,\n  };\n};\n\nexport default connect(mapStateToProps, { saveTransaction })(StockForm); //no current company\n"]},"metadata":{},"sourceType":"module"}